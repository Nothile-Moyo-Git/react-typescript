{"version":3,"file":"static/js/647.d743c1e6.chunk.js","mappings":"yPAoGA,EAtFgB,WAGZ,IAAMA,GAAUC,EAAAA,EAAAA,MACVC,GAAsBC,EAAAA,EAAAA,YAAWC,EAAAA,IAGvC,GAAgCC,EAAAA,EAAAA,UAAiB,IAAG,eAA7CC,EAAQ,KAAEC,EAAW,KAC5B,GAAsCF,EAAAA,EAAAA,WAAkB,GAAM,eAAvDG,EAAW,KAAEC,EAAc,KAClC,GAAwCJ,EAAAA,EAAAA,WAAkB,GAAK,eAAxDK,EAAY,KAAEC,EAAe,KAG9BC,EAAgB,SAACC,GACnB,OAAOA,EAAMC,OAAS,CAC1B,EAGMC,EAAa,yCAAG,WAAOC,GAA4B,gFAiBrD,GAfAA,EAAMC,iBAGNR,GAAe,GAITS,EAASF,EAAME,OAKfC,EAAUP,EAAcM,EAAOE,KAAKC,OAC1CV,EAAgBQ,IAIA,IAAZA,EAAgB,kCAGIG,EAAAA,EAAAA,GAAQ,OAAQhB,GAAU,KAAD,EAAvCiB,EAAK,OAEQ,OAAnBrB,QAAmB,IAAnBA,GAAAA,EAAqBsB,OAAOD,GAE5BvB,EAAQyB,KAAK,KAAK,4CAGzB,gBA7BkB,sCA+CnB,OACI,kBAAMC,UAAU,WAAWC,SAAUZ,EAAc,WAE/C,kBAAOa,GAAG,YAAYC,QAAQ,OAAOH,UAAU,kBAAiB,SAAEhB,EAAe,YAAc,gDAE/F,kBACIoB,KAAK,OACLC,KAAK,OACLV,MAAOf,EACP0B,SAzBQ,SAAChB,GAEjBA,EAAMC,iBAGN,IAAMgB,EAAUjB,EAAME,OAGtBX,EAAY0B,EAAQZ,QAGJ,IAAhBb,GAAwBG,EAAiBC,EAAcqB,EAAQZ,OAEnE,EAaYa,YAAY,uDACZR,UAAWhB,EAAe,kBAAoB,yCAC9C,kBAAgB,YAChB,sBAGJ,mBAAQgB,UAAWhB,EAAe,mBAAqB,2CAA4CyB,UAAWzB,EAAa,SAAC,aAIxI,C","sources":["components/todos/NewTodo.tsx"],"sourcesContent":["/**\r\n * New Todo component\r\n * Houses a form which performs a post request to my firebase endpoint\r\n * It uses form validation and also outputs information on a successful request\r\n * \r\n * @returns NewTodo : JSX Element\r\n */\r\n\r\nimport \"./NewTodo.scss\";\r\nimport queryDB from \"../../backend/queryDB\";\r\nimport React, { useState, useContext } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { TodoContext } from \"../context/todo-context\";\r\n\r\nconst NewTodo = () => {\r\n\r\n    // Creating our history so we can navigate to the tasks page upon successful submission\r\n    const history = useHistory();\r\n    const todoContextInstance = useContext(TodoContext);\r\n\r\n    // declaring states, we need to keep track of the current input and the submission status of the form\r\n    const [todoText, setTodoText] = useState<string>(\"\");\r\n    const [isSubmitted, setIsSubmitted] = useState<boolean>(false);\r\n    const [isInputValid, setIsInputValid] = useState<boolean>(true);\r\n\r\n    // Validate form inputs\r\n    const validateInput = (input : string) => {\r\n        return(input.length > 2);\r\n    }\r\n\r\n    // Submit form and perform query to backend\r\n    const submitHandler = async (event : React.SyntheticEvent) => {\r\n        \r\n        event.preventDefault();\r\n\r\n        // Set form as valid to now enable form validation\r\n        setIsSubmitted(true);\r\n\r\n        // Create an object and a dynamic interface for our inputs\r\n        // The properties in the objects are the names we use for our form elements\r\n        const target = event.target as typeof event.target & {\r\n            task: { value : string }\r\n        }\r\n\r\n        // validate input\r\n        const isValid = validateInput(target.task.value);\r\n        setIsInputValid(isValid);\r\n\r\n        // If our inputs are valid, the form is valid. We only have one entry here so we make this part simpler\r\n\r\n        if (isValid === true) {\r\n\r\n            // Submit the new task and retrieve the updated todos and then go back to the home page\r\n            const todos = await queryDB(\"POST\", todoText);\r\n\r\n            todoContextInstance?.format(todos);\r\n\r\n            history.push(\"/\");\r\n        }\r\n        \r\n    };\r\n\r\n    const updateInput = (event : React.FormEvent<HTMLInputElement>) => {\r\n\r\n        event.preventDefault();\r\n\r\n        // Create the element reference since value doesn't exist on EventTarget but does on HTMLInputElement\r\n        const element = event.target as HTMLInputElement;\r\n\r\n        // Update our input field\r\n        setTodoText(element.value);\r\n\r\n        // If our form has been submitted, then validate the input\r\n        isSubmitted === true && setIsInputValid( validateInput(element.value) );\r\n\r\n    };\r\n\r\n\r\n    return(\r\n        <form className=\"new-todo\" onSubmit={submitHandler}>\r\n\r\n            <label id=\"taskLabel\" htmlFor=\"task\" className=\"new-todo__label\">{isInputValid ? \"Add Task*\" : \"Error: Please enter more than 2 characters\" }</label>\r\n                \r\n            <input\r\n                name=\"task\"\r\n                type=\"text\"\r\n                value={todoText}\r\n                onChange={updateInput}\r\n                placeholder=\"Please enter the task you need to add to the list...\"\r\n                className={isInputValid ? \"new-todo__input\" : \"new-todo__input new-todo__input--error\"}\r\n                aria-labelledby=\"taskLabel\"\r\n                aria-required\r\n            />\r\n\r\n            <button className={isInputValid ? \"new-todo__submit\" : \"new-todo__submit new-todo__submit--error\"} disabled={!isInputValid}>Submit</button>\r\n\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default NewTodo;"],"names":["history","useHistory","todoContextInstance","useContext","TodoContext","useState","todoText","setTodoText","isSubmitted","setIsSubmitted","isInputValid","setIsInputValid","validateInput","input","length","submitHandler","event","preventDefault","target","isValid","task","value","queryDB","todos","format","push","className","onSubmit","id","htmlFor","name","type","onChange","element","placeholder","disabled"],"sourceRoot":""}