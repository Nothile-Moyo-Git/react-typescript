{"version":3,"file":"static/js/58.66bc6243.chunk.js","mappings":"wPAyBMA,EAAW,WAGb,IAAMC,GAAUC,EAAAA,EAAAA,MAMVC,GAHOC,EAAAA,EAAAA,MAGGD,GAIVE,EAAsBC,EAAAA,WAAiBC,EAAAA,IAGvCC,EAAgD,OAAnBH,QAAmB,IAAnBA,OAAmB,EAAnBA,EAAqBI,MAElDC,EAAmB,OAALF,QAAK,IAALA,OAAK,EAALA,EAAOG,QAAO,SAACC,GAC/B,OAAOA,EAAKT,KAAOA,CACvB,IAGA,EAAwBG,EAAAA,SAAuB,IAAG,eAA3CM,EAAI,KAAEC,EAAO,KAWdC,EAAiB,yCAAG,WAAOC,GAAuB,4EAIpD,OAFAA,EAAMC,iBAEN,UACuBC,EAAAA,EAAAA,GAAQ,MAAOL,EAAMT,GAAI,KAAD,EAAzCe,EAAQ,OAGK,OAAnBb,QAAmB,IAAnBA,GAAAA,EAAqBc,OAAOD,GAE5BE,MAAM,yBAGNnB,EAAQoB,KAAK,KAAK,2CAErB,gBAfsB,sCA2BvB,OAVAC,EAAAA,EAAAA,YAAU,WAGDZ,GAAeA,EAAYa,OAAS,GACrCV,EAAQH,EAAY,GAAGE,KAI/B,GAAE,CAACP,KAGC,kBAAMmB,UAAU,YAAYC,SAAUX,EAAmB,cAAY,iBAAgB,WACjF,kBAAOX,GAAG,YAAYuB,QAAQ,OAAOF,UAAU,mBAAkB,SAAC,oBAClE,kBACIG,KAAK,OACLC,KAAK,OACLC,MAAOjB,EACPkB,SA1Cc,SAACf,GAEvBA,EAAMC,iBAENH,EAAQE,EAAMgB,OAAOF,MACzB,EAsCY,kBAAgB,YAChB,mBACAL,UAAU,mBACV,cAAY,qBAEhB,4BAAQ,mBAGpB,EAEA,EAAelB,EAAAA,KAAWN,E","sources":["components/todos/EditTodo.tsx"],"sourcesContent":["/**\r\n * Edit todo component\r\n * Currently houses a form which performs a PUT request to an endpoint in firebase\r\n * We use the id of the task to represent the id key in the database\r\n * We receive the relevant props from Todos\r\n * \r\n * @returns EditTodo : JSX\r\n*/\r\n\r\nimport React, { useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\nimport './EditTodo.scss';\r\nimport { useParams } from \"react-router-dom\";\r\nimport { TodoContext } from '../context/todo-context';\r\nimport queryDB from \"../../backend/queryDB\";\r\n\r\ninterface ParamTypes {\r\n    id : string\r\n}\r\n\r\ninterface Todo{\r\n    id : string,\r\n    task : string\r\n}\r\n\r\nconst EditTodo = () => {\r\n\r\n    // Create an instance of the history object \r\n    const history = useHistory();\r\n\r\n    // Get the slug from the URL\r\n    const slug = useParams<ParamTypes>();\r\n\r\n    // Get the post ID dynamically. This will be used to filter the array\r\n    const id = slug.id;\r\n\r\n    // Get the todos from our context and filter the current item we're working it. \r\n    // We'll initialise the edit to do text to this to make it simpler to edit\r\n    const todoContextInstance = React.useContext(TodoContext);\r\n\r\n    // Set tasks for filtering\r\n    const tasks : Todo[] | undefined = todoContextInstance?.todos;\r\n\r\n    const currentTask = tasks?.filter((task : Todo) => {\r\n        return task.id === id;\r\n    });\r\n\r\n    // We're using taskRef here instead of using state to reduce the performance impact\r\n    const [task, setTask] = React.useState<string>(\"\");\r\n\r\n    // Upodate our input string\r\n    const updateTaskHandler = (event : React.ChangeEvent<{ value : string }>) => {\r\n\r\n        event.preventDefault();\r\n\r\n        setTask(event.target.value);\r\n    }\r\n\r\n    // Perform an api request to firebase, we'll be performing a PUT request here using the ID from the browser as the object key in firebase\r\n    const submitFormHandler = async (event : React.FormEvent) => {\r\n\r\n        event.preventDefault();\r\n\r\n        // Update the resource in firebase\r\n        const response = await queryDB(\"PUT\", task, id);\r\n\r\n        // Update the list of our todo items\r\n        todoContextInstance?.format(response);\r\n\r\n        alert(\"Success! Entry edited\");\r\n\r\n        // Redirect to the home page.\r\n        history.push(\"/\");\r\n\r\n    };\r\n \r\n    useEffect(() => {\r\n\r\n\r\n        if ( currentTask && currentTask.length > 0 ) {\r\n            setTask(currentTask[0].task);\r\n        }\r\n   \r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    },[todoContextInstance]);\r\n\r\n    return (\r\n        <form className=\"edit-todo\" onSubmit={submitFormHandler} data-testid=\"edit-todo-form\">\r\n            <label id=\"taskLabel\" htmlFor=\"task\" className=\"edit-todo__label\">Edit your task</label>\r\n            <input\r\n                type=\"text\"\r\n                name=\"task\"\r\n                value={task}\r\n                onChange={updateTaskHandler}\r\n                aria-labelledby=\"taskLabel\"\r\n                aria-required\r\n                className=\"edit-todo__input\"\r\n                data-testid=\"edit-todo-input\"\r\n            />\r\n            <button>Update To do</button>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default React.memo(EditTodo);\r\n\r\n"],"names":["EditTodo","history","useHistory","id","useParams","todoContextInstance","React","TodoContext","tasks","todos","currentTask","filter","task","setTask","submitFormHandler","event","preventDefault","queryDB","response","format","alert","push","useEffect","length","className","onSubmit","htmlFor","type","name","value","onChange","target"],"sourceRoot":""}